{"version":3,"file":"ng-bs-switch.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 4ff1f805c3f83171def9","webpack:///src/ng-bs-switch.ts","webpack:///external \"angular\""],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"angular\")) : factory(root[\"angular\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4ff1f805c3f83171def9\n **/","import * as angular from 'angular';\n\nexport class NgBsSwitch implements angular.IComponentController {\n\n    static $inject = ['$timeout', '$element'];\n\n    isChecked: boolean;\n    disabled: boolean;\n\n    ngModelCtrl: angular.INgModelController = null;\n\n    offTextStyle: string;\n    onTextStyle: string;\n\n    size: 'lg' | 'sm' | 'xs' | '';\n\n    labelWidth: number;\n    buttonWidth: number;\n    containerWidth: number;\n\n    animated: boolean = false;\n\n    get labelDimension(): string {\n        return this.labelWidth ? this.labelWidth + 'px' : 'auto';\n    }\n\n    get containerDimension(): string {\n        return this.containerWidth ? this.containerWidth + 'px' : 'auto';\n    }\n\n    get wrapperOffset(): string {\n        return this.isChecked ? 0 + '' : (0 - this.labelWidth) + 'px';\n    }\n\n    private rootElement: HTMLElement;\n\n    constructor(private $timeout, private $element) {\n    }\n\n    resize() {\n        this.labelWidth = 0;\n        this.buttonWidth = 0;\n        this.containerWidth = 0;\n        this.$timeout(this.calculateDimension.bind(this));\n    }\n\n    calculateDimension() {\n        var rootElement = this.$element[0];\n        if (!this.labelWidth) {\n            let onLabelWidth = rootElement.querySelector('.on-text').clientWidth;\n            let offLabelWidth = rootElement.querySelector('.off-text').clientWidth;\n            this.labelWidth = onLabelWidth > offLabelWidth ? onLabelWidth : offLabelWidth;\n        }\n        if (!this.buttonWidth) {\n            this.buttonWidth = rootElement.querySelector('.switch-button').clientWidth;\n        }\n        this.containerWidth = this.labelWidth + this.buttonWidth;\n    }\n\n    bindNgModelCtrl(ngModelCtrl: angular.INgModelController) {\n        this.ngModelCtrl = ngModelCtrl;\n        this.ngModelCtrl.$render = () => {\n            this.isChecked = Boolean(this.ngModelCtrl.$modelValue);\n            if (!this.animated) {\n                this.animated = true;\n            }\n        };\n\n        this.$timeout(this.calculateDimension.bind(this));\n    }\n\n    onClick() {\n        if (!this.disabled) {\n            this.isChecked = !this.isChecked;\n            this.ngModelCtrl.$setViewValue(this.isChecked);\n        }\n    }\n\n    $onInit() {\n        this.isChecked = angular.isUndefined(this.isChecked) ? false : this.isChecked;\n        this.disabled = angular.isUndefined(this.disabled) ? false : this.disabled;\n\n        this.offTextStyle = angular.isUndefined(this.offTextStyle) ? 'default' : this.offTextStyle;\n        this.onTextStyle = angular.isUndefined(this.onTextStyle) ? 'primary' : this.onTextStyle;\n    }\n\n    $onChanges(changes: any) {\n        if (changes.buttonWidth || changes.labelWidth || changes.size || changes.offText || changes.onText) {\n            if (angular.isUndefined(this.containerWidth)) {\n                return;\n            }\n            this.$timeout(this.resize.bind(this));\n        }\n    }\n\n    $onDestroy() {\n        if (typeof this.ngModelCtrl !== 'undefined') {\n            this.ngModelCtrl = null;\n        }\n    }\n\n}\n\nexport const ngBsSwitch = angular.module('ngFancy.ngBsSwitch', [])\n    .directive('ngBsSwitch', () => {\n        return {\n            restrict: 'E',\n            controller: NgBsSwitch,\n            controllerAs: '$ctrl',\n            template: `\n                <span class=\"ng-bs-switch-container\" \n                      ng-click=\"$ctrl.onClick()\" \n                      ng-class=\"[{checked: $ctrl.isChecked, disabled: $ctrl.disabled}, $ctrl.size]\"\n                      ng-style=\"{width: $ctrl.containerDimension}\"\n                      tabindex=\"{{$ctrl.disabled ? '-1': '0'}}\"><!--\n                 --><span class=\"switch-wrapper\"\n                          ng-class=\"{animated: $ctrl.animated}\"\n                          ng-style=\"{left: $ctrl.wrapperOffset}\"><!--\n                     --><span class=\"on-text switch-label\"\n                              ng-class=\"$ctrl.onTextStyle\"\n                              ng-style=\"{width: $ctrl.labelDimension}\">{{$ctrl.onText}}</span><!--\n                     --><span class=\"switch-button\"></span><!--\n                     --><span class=\"off-text switch-label\"\n                              ng-class=\"$ctrl.offTextStyle\"\n                              ng-style=\"{width: $ctrl.labelDimension}\">{{$ctrl.offText}}</span><!--\n                 --></span><!--\n             --></span>\n            `,\n            scope: {},\n            bindToController: {\n                'offText': '<?',\n                'onText': '<?',\n                'onTextStyle': '<?',\n                'offTextStyle': '<?',\n                'buttonWidth': '<?',\n                'labelWidth': '<?',\n                'size': '<?',\n                'disabled': '<?'\n            },\n            require: ['ngModel', 'ngBsSwitch'],\n            link: (scope, element, attr, ctrls) => {\n                let ngModelCtrl = ctrls[0];\n                let ngBsSwitchCtrl = ctrls[1];\n                ngBsSwitchCtrl.bindNgModelCtrl(ngModelCtrl);\n            }\n        };\n    })\n    .name;\n\n\n/** WEBPACK FOOTER **\n ** src/ng-bs-switch.ts\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 1\n ** module chunks = 0\n **/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACtCA;AAEA;AAkCA;AAAA;AAAA;AA3BA;AAWA;AAiBA;AAfA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA/FA;AAiGA;AAAA;AAnGA;AAqGA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACnJA;;;;;","sourceRoot":""}